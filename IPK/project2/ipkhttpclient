#!/usr/bin/env python3
__author__ = 'xcoufa09'

import logging
import socket
from argparse import ArgumentParser
from datetime import datetime
from urllib.parse import urlparse
from time import sleep

REQUEST = ('GET {0} HTTP/1.1\r\n'
           'Accept: */*\r\n'
           'Accept-Encoding: identity\r\n'
           'Host: {1}\r\n'
           'Connection: close\r\n'
           '\r\n')
LOG_NAME = 'ipkHttpClient-{0}'.format(datetime.today().
                                      strftime('%Y-%m-%d:%H:%M:%S'))
RESP_NAME = 'ipkResp-{0}'.format(datetime.today().
                                 strftime('%Y-%m-%d:%H:%M:%S'))
CHUNK_SIZE = 0

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

in_log = logging.getLogger('IN')
in_log.setLevel(level=logging.DEBUG)
fh1 = logging.FileHandler(LOG_NAME + '.in.log')
fh1.setLevel(level=logging.DEBUG)
fh1.setFormatter(formatter)
in_log.addHandler(fh1)

out_log = logging.getLogger('OUT')
out_log.setLevel(level=logging.DEBUG)
fh2 = logging.FileHandler(LOG_NAME + '.out.log')
fh2.setLevel(level=logging.DEBUG)
fh2.setFormatter(formatter)
out_log.addHandler(fh2)


def get_uri():
    """Argument parser"""
    parser = ArgumentParser(description="HTTP TCP/IP client",
                            epilog='Tomas Coufal <xcoufa09@stud.fit.vutbr.cz>')
    parser.add_argument('URI', action='store',
                        help='requested HTTP URI, for details see rfc3986')
    args = vars(parser.parse_args())
    uri = urlparse(args['URI'])
    if not uri.scheme == 'http':
        raise SyntaxError('Scheme is not valid. Accepts HTTP only.')
    if len(uri.netloc.split(':')) != 2:
        raise SyntaxError('Port not specified.')
    ret = uri.netloc.split(':')
    path = uri.path if uri.path else '/'
    ret.append(path)
    return ret


def __get_line(s):
    line = bytes()
    while True:
        char = s.recv(1)
        line += char
        if not char or char == b'\n':
            return line


def get_header(s):
    header = bytes()
    while True:
        line = __get_line(s)
        if line in (b'\n', b'\r\n', b''):
            return header
        header += line


if __name__ == "__main__":
    host, port, path = get_uri()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, int(port)))
    request = REQUEST.format(path, host).encode('utf-8')
    s.send(request)
    out_log.info(request)

    # recieve response from server
    # get header
    header = get_header(s)
    in_log.info(header)
    chunked = False
    if b'Transfer-Encoding: chunked' in header:
        chunked = True
    # get content
    payload = bytes()
    while True:
        if chunked:
            size = __get_line(s)
            if size:
                CHUNK_SIZE = int(size.decode().strip().split(';')[0], 16)
                in_log.info(size)
            # DANGER: Dragons ahead! - simple magic, at first read also the
            # trailing characters \r\n at the end of chunk and also sleep
            # because if I won't wait it's possible I won't get whole chunk
            sleep(0.1)
            chunk = s.recv(CHUNK_SIZE)
            s.recv(2)
            in_log.debug('Receiving chunk of size {0}: data received {1}'.format(CHUNK_SIZE, len(chunk)))
            in_log.info(chunk + b'\r\n')
        else:
            chunk = s.recv(CHUNK_SIZE)
            in_log.info(chunk)
        if not chunk:
            break
        payload += chunk
        # read EOL

    s.close()
    # write what server sent
    with open(RESP_NAME + '.header', 'wb') as h:
        h.write(header)
        h.flush()
    with open(RESP_NAME + '.payload', 'wb') as p:
        p.write(payload)
        p.flush()
